#!/bin/bash

echo -ne "\n**************************************************************************************************************\n"
echo -ne "* You are executing the \033[1mproname_import\033[0m script, which is the first part of the \033[1mPRONAME\033[0m pipeline.              *\n"
echo -ne "*                                                                                                            *\n"
echo -ne "* Please \033[31m\033[1mdo not\033[0m move, rename or remove files and folders generated by PRONAME until the end of the pipeline. *\n"
echo -ne "**************************************************************************************************************\n\n"

# Help menu

Help()
{

## Display Help
   echo -ne "\nThe proname_import script is the first part of the PRONAME pipeline and allows importing Nanopore metabarcoding data into the pipeline and initial processing. \nIt includes the trimming of adapter and primer sequences if asked by the user, the counting of simplex reads and duplex reads (if applicable), \nand the creation of Length vs Quality scatter plots."
   echo
   echo -ne "\nSyntax: proname_import [--inputpath|--threads|--duplex|--trimadapters|--trimprimers|--fwdprimer|--revprimer|--version|--help]"
   echo
   echo "Options:"
   echo -ne "\t--inputpath\tPath to the folder containing raw fastq files.\n"
   echo -ne "\t--threads\tNumber of threads to use for the Guppy adapter-trimming step and/or the Cutadapt primmer-trimming step. \n"
   echo -ne "\t\t\tYou can know the number of available threads on your computer by running the command 'nproc --all' [Default: 2]\n"
   echo -ne "\t--duplex\tIndicate whether your sequencing data include duplex reads or not. Duplex reads are high-quality reads \n"
   echo -ne "\t\t\tthat were introduced with the kit 14 chemistry. [Option: \"yes\" or \"no\"]\n"
   echo -ne "\t--trimadapters\tIndicate whether your sequencing data contain adapters that should be trimmed. [Option: \"yes\" or \"no\"]\n"
   echo -ne "\t--trimprimers\tIndicate whether your sequencing data contain primers that should be trimmed. [Option: \"yes\" or \"no\"]\n"
   echo -ne "\t--fwdprimer\tThe sequence of the forward primer used during PCR to amplify DNA. If barcoded primers were used to \n"
   echo -ne "\t\t\tmultiplex samples, please provide here only the target-specific part of the primer in 5'->3' orientation. \n"
   echo -ne "\t\t\tThis argument is required if --trimprimers is set to \"yes\".\n"
   echo -ne "\t--revprimer\tThe sequence of the reverse primer used during PCR to amplify DNA. If barcoded primers were used to \n"
   echo -ne "\t\t\tmultiplex samples, please provide here only the target-specific part of the primer in 5'->3' orientation. \n"
   echo -ne "\t\t\tThis argument is required if --trimprimers is set to \"yes\".\n"
   echo -ne "\t--version\tPrint the version of the pipeline.\n"
   echo -ne "\t--help\t\tPrint this help."
   echo


## Usage example
   echo -ne "\nUsage example:"
   echo -ne "\n-------------"
   echo
   echo "proname_import \\"
   echo "  --inputpath RawData \\"
   echo "  --duplex yes \\"
   echo "  --trimadapters yes \\"
   echo "  --trimprimers yes \\"
   echo "  --fwdprimer AGRGTTYGATYMTGGCTCAG \\"
   echo "  --revprimer CGACATCGAGGTGCCAAAC"
   echo
}

Version()
{
    echo -ne "proname_import from the PRONAME pipeline, version 0.1.0\n\n"
}

num_threads="2"

# Transform long options to short ones

for arg in "$@"; do
  shift
  case "$arg" in
    '--help')            set -- "$@" '-h'   ;;
    '--version')         set -- "$@" '-v'   ;;
    '--inputpath')       set -- "$@" '-a'   ;;
    '--threads')         set -- "$@" '-b'   ;;
    '--duplex')          set -- "$@" '-c'   ;;
    '--trimadapters')    set -- "$@" '-d'   ;;
    '--trimprimers')     set -- "$@" '-e'   ;;
    '--fwdprimer')       set -- "$@" '-f'   ;;
    '--revprimer')       set -- "$@" '-g'   ;;
    *)                   set -- "$@" "$arg" ;;
  esac
done


# Parse short options

while getopts :hva:b:c:d:e:f:g: flag
do
    case "${flag}" in
        h) Help
        exit;;
        v) Version
        exit;;
        a) fastq_folder=${OPTARG};;
        b) num_threads=${OPTARG};;
        c) duplex_data=${OPTARG};;
        d) adapter_trimming=${OPTARG};;
        e) primer_trimming=${OPTARG};;
        f) fwd_primer=${OPTARG};;
        g) rev_primer=${OPTARG};;
        \?) # Invalid option
                echo -ne "Error: Invalid option\n"
                echo -ne "Please consult the help menu with 'proname_import --help'\n"
                exit;;
    esac
done


# Mandatory arguments

if [ ! "$fastq_folder" ] || [ ! "$duplex_data" ] || [ ! "$adapter_trimming" ] || [ ! "$primer_trimming" ]; then
  echo -ne "\n\033[31m\033[1mError: arguments --inputpath, --duplex, --trimadapters and --trimprimers must be provided\033[0m\n\n"
  echo -ne "Please consult the help menu with 'proname_import --help'\n"
  exit;
fi

######################################################


# Listing the sequence identifiers present in each fastq file

echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mRecording read distribution in each sample...\033[0m\n"

mkdir Rawseqids

for sample in $(ls ${fastq_folder} | awk -F '.fastq' '{print $1}')
do
   awk 'NR == 1 || (NR-1) % 4 == 0' ${fastq_folder}/${sample}.fastq | cut -d "@" -f 2 > Rawseqids/rawseqids_${sample}
done

echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mRead distribution recorded! \033[0m\n"


#######################################
# If adaptor trimming is not required #
#######################################

if [ ${adapter_trimming} = "no" ]
then
   # Concatenating fastq files
   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mConcatenating fastq files...\033[0m\n"

   cat ${fastq_folder}/* > reads_simplex_duplex.fastq

   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mConcatenating completed! \033[0m\n"
fi

###################################
# If adaptor trimming is required #
###################################

if [ ${adapter_trimming} = "yes" ]
then
   # Removing adapters

   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mTrimming adapters from reads...\033[0m\n"

   guppy_barcoder \
      --input_path ${fastq_folder} \
      --config configuration.cfg \
      --detect_adapter \
      --detect_mid_strand_adapter \
      --trim_adapters \
      --worker_threads ${num_threads} \
      --save_path Guppy_adapter_trimmed

   cat Guppy_adapter_trimmed/*/*.fastq > reads_simplex_duplex.fastq
   rm -r Guppy_adapter_trimmed

   if [ -e "reads_simplex_duplex.fastq" ]
   then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mAdapter trimming completed! \033[0m\n"
   else
      echo -ne "\n\033[31m\033[1mError: adapter trimming failed. \033[0m\n\n"
      echo -ne "Please consult the help menu.\n"
      exit;
   fi
fi

##################################
# If primer trimming is required #
##################################

if [ ${primer_trimming} = "yes" ]
then
   # Mandatory arguments

   if [ ! "$fwd_primer" ] || [ ! "$rev_primer" ]; then
      echo -ne "\n\033[31m\033[1mError: if primer trimming is required, arguments --fwprimer and --revprimer must be provided\033[0m\n\n"
      echo -ne "Please consult the help menu with 'proname_import --help'\n"
      exit;
   fi

   # Producing the reverse complement of the primers provided by the user
   RC_fwd_primer=$(echo -ne ">fwd_primer\n${fwd_primer}\n" | seqkit seq -r -p -t DNA 2>/dev/null | grep -v ">")
   RC_rev_primer=$(echo -ne ">rev_primer\n${rev_primer}\n" | seqkit seq -r -p -t DNA 2>/dev/null | grep -v ">")

   # Trimming primer sequences from reads
   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mTrimming primers from reads...\033[0m\n"
   cutadapt \
      reads_simplex_duplex.fastq \
      -g ${fwd_primer} \
      -a ${RC_rev_primer} \
      -e 0 \
      -n 2 \
      -j ${num_threads} \
      -o cutadapt_output_tmp.fastq > /dev/null 2>/dev/null \
   && cutadapt \
      cutadapt_output_tmp.fastq \
      -g ${rev_primer} \
      -a ${RC_fwd_primer} \
      -e 0 \
      -n 2 \
      -j ${num_threads} \
      -o cutadapt_output.fastq >/dev/null 2>/dev/null \
   && rm cutadapt_output_tmp.fastq
   
   if [ -e "cutadapt_output.fastq" ]
   then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mPrimer trimming completed! \033[0m\n"
   else
      echo -ne "\n\033[31m\033[1mError: primer trimming failed. \033[0m\n\n"
      echo -ne "Please consult the help menu.\n"
      exit;
   fi
   mv cutadapt_output.fastq reads_simplex_duplex.fastq
fi
##################################

if [ ${duplex_data} = "yes" ]
then
   # Separating duplex from simplex reads and counting them
   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mCounting the number of duplex and simplex reads in the dataset...\033[0m\n"
   awk '/^@.*;/ && !skip {print; getline; print; getline; print; getline; print} {skip = (/^\+$/)}' reads_simplex_duplex.fastq > reads_duplex.fastq
   awk '/^@/ && !/;/ && !skip {print; getline; print; getline; print; getline; print} {skip = (/^\+$/)}' reads_simplex_duplex.fastq > reads_simplex.fastq
     
   echo -ne "Sample_name\tSimplex_reads\tDuplex_reads\n$(\
   for sample in $(ls ${fastq_folder} | awk -F '.fastq' '{print $1}')
   do
      paste \
        <(printf %s ${sample}) \
        <(grep -f <(awk 'NR == 1 || (NR-1) % 4 == 0' reads_simplex.fastq | cut -d "@" -f 2 | cut -d " " -f 1) Rawseqids/rawseqids_${sample} | grep -v ";" | wc -l) \
        <(grep -c -f <(awk 'NR == 1 || (NR-1) % 4 == 0' reads_duplex.fastq | cut -d "@" -f 2  | cut -d " " -f 1) Rawseqids/rawseqids_${sample})
   done)\n" > simplex_duplex_read_distribution.tsv

   nduplex=$(awk 'NR == 1 || (NR-1) % 4 == 0' reads_duplex.fastq | wc -l)
   nsimplex=$(awk 'NR == 1 || (NR-1) % 4 == 0' reads_simplex.fastq | wc -l)

   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mCounting completed! \033[0m\n\n"
   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : There are ${nsimplex} simplex and ${nduplex} duplex reads in the dataset. Here is their distribution in each sample:\n\n$(cat simplex_duplex_read_distribution.tsv)\n\nThese results have been saved as \e[34msimplex_duplex_read_distribution.tsv\e[0m\n\n"
fi

if [ ${duplex_data} = "no" ]
then
    echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mCounting the number of simplex reads in the dataset...\033[0m\n"
    awk '/^@/ && !/;/ && !skip {print; getline; print; getline; print; getline; print} {skip = (/^\+$/)}' reads_simplex_duplex.fastq > reads_simplex.fastq
    rm reads_simplex_duplex.fastq
     
    echo -ne "Sample_name\tSimplex_reads\n$(\
    for sample in $(ls ${fastq_folder} | awk -F '.fastq' '{print $1}')
    do
      paste \
        <(printf %s ${sample}) \
        <(grep -f <(awk 'NR == 1 || (NR-1) % 4 == 0' reads_simplex.fastq | cut -d "@" -f 2 | cut -d " " -f 1) Rawseqids/rawseqids_${sample} | grep -v ";" | wc -l)
    done)\n" > simplex_read_distribution.tsv

    nsimplex=$(awk 'NR == 1 || (NR-1) % 4 == 0' reads_simplex.fastq | wc -l)
     
    echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mCounting completed! \033[0m\n\n"
    echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : There are ${nsimplex} simplex reads in the dataset. Here is their distribution in each sample:\n\n$(cat simplex_read_distribution.tsv)\n\nThese results have been saved as \e[34msimplex_read_distribution.tsv\e[0m\n\n"
fi

# Visualization of data quality

echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mCreating Length vs Quality scatter plots...\033[0m\n"


if [ ${duplex_data} = "yes" ]
then
    NanoPlot \
     -t ${num_threads} \
     --fastq reads_simplex_duplex.fastq \
     -o NanoPlot_visualizations
    cp NanoPlot_visualizations/LengthvsQualityScatterPlot_dot.png LengthvsQualityScatterPlot_simplex_duplex.png
    rm -r NanoPlot_visualizations

    NanoPlot \
      -t ${num_threads} \
      --fastq reads_duplex.fastq \
      -o NanoPlot_visualizations_duplex
    cp NanoPlot_visualizations_duplex/LengthvsQualityScatterPlot_dot.png LengthvsQualityScatterPlot_duplex.png
    rm -r NanoPlot_visualizations_duplex

    NanoPlot \
      -t ${num_threads} \
      --fastq reads_simplex.fastq \
      -o NanoPlot_visualizations_simplex
    cp NanoPlot_visualizations_simplex/LengthvsQualityScatterPlot_dot.png LengthvsQualityScatterPlot_simplex.png
    rm -r NanoPlot_visualizations_simplex

    if [ -e "LengthvsQualityScatterPlot_simplex_duplex.png" ] && [ -e "LengthvsQualityScatterPlot_duplex.png" ] && [ -e "LengthvsQualityScatterPlot_simplex.png" ]
    then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mScatter plots saved as\033[0m \e[34mLengthvsQualityScatterPlot_simplex_duplex.png\e[0m, \e[34mLengthvsQualityScatterPlot_duplex.png\e[0m and \e[34mLengthvsQualityScatterPlot_simplex.png\e[0m.\n"
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : You must now decide to carry on the analysis only with duplex reads (recommended if there are enough), only with simplex reads or with both.\n"
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : The next script of the pipeline to use is \033[1mproname_filter\033[0m.\n\n"
      echo -ne "\nUsage example:"
      echo -ne "\n-------------"
      echo
      echo "proname_filter \\"
      echo "  --datatype duplex \\"
      echo "  --filtminlen 3500 \\"
      echo "  --filtmaxlen 5000 \\"
      echo "  --filtminqual 15 \\"
      echo "  --inputpath RawData"
      echo
    else
      echo -ne "\n\033[31m\033[1mError: plotting failed. \033[0m\n\n"
      echo -ne "Please consult the help menu.\n"
      exit;
    fi
fi

if [ ${duplex_data} = "no" ]
then
    NanoPlot \
      -t ${num_threads} \
      --fastq reads_simplex.fastq \
      -o NanoPlot_visualizations_simplex
    cp NanoPlot_visualizations_simplex/LengthvsQualityScatterPlot_dot.png LengthvsQualityScatterPlot_simplex.png
    rm -r NanoPlot_visualizations_simplex

    if [ -e "LengthvsQualityScatterPlot_simplex.png" ]
    then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mScatter plot saved as\033[0m \e[34mLengthvsQualityScatterPlot_simplex.png\e[0m.\n"
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : The next script of the pipeline to use is \033[1mproname_filter\033[0m.\n\n"
      echo -ne "\nUsage example:"
      echo -ne "\n-------------"
      echo
      echo "proname_filter \\"
      echo "  --datatype simplex \\"
      echo "  --filtminlen 3500 \\"
      echo "  --filtmaxlen 5000 \\"
      echo "  --filtminqual 15 \\"
      echo "  --inputpath RawData"
      echo
    else
      echo -ne "\n\033[31m\033[1mError: plotting failed. \033[0m\n\n"
      echo -ne "Please consult the help menu.\n"
      exit;
    fi
fi


unset fastq_folder
unset num_threads
unset duplex_data
unset adapter_trimming
unset primer_trimming
unset fwd_primer
unset rev_primer
unset RC_fwd_primer
unset RC_rev_primer
