#!/bin/bash

echo -ne "\n**************************************************************************************************************\n"
echo -ne "* You are executing the \033[1mproname_taxonomy\033[0m script, which is the fourth and last part of the \033[1mPRONAME\033[0m pipeline.  *\n"
echo -ne "*                                                                                                            *\n"
echo -ne "* Please \033[31m\033[1mdo not\033[0m move, rename or remove files and folders generated by PRONAME until the end of the pipeline. *\n"
echo -ne "**************************************************************************************************************\n\n"

# Help menu

Help()
{

## Display Help
   echo -ne "\nThe proname_taxonomy script is the fourth and last part of the PRONAME pipeline. This script carries out the taxonomic analysis of \nHQ consensus sequences coming from the proname_refine script. QIIME2-formatted taxonomy and barplot files are generated if the QIIME2 \noption was selected at the previous step (proname_refine). If not, the taxonomic analysis provides a taxonomy TSV file that can be used \nfor any other application outside of QIIME2."
   echo
   echo -ne "\nSyntax: proname_taxonomy [--qseqs|--qtable|--db|--reftax|--evalue|--percid|--qcover|--threads|--metadata|--assay|--version|--help]"
   echo
   echo "Options:"
   echo -ne "\t--qseqs\t\tPath to query sequences. It should be either 'rep_seqs.qza' (if data was imported into QIIME2 at the \n"
   echo -ne "\t\t\tprevious step) or 'rep_seqs.fasta'.\n"
   echo -ne "\t--qtable\tPath to query sequence abundance table. It should be 'rep_table.qza'. This argument is only needed if \n"
   echo -ne "\t\t\tdata was imported into QIIME2 at the previous step.\n"
   echo -ne "\t--db\t\tPath to the name of the reference database used by blastn to carry out the taxonomic analysis. \n"
   echo -ne "\t\t\tThe rEGEN-B (rrn operons Extracted from GENomes of Bacteria) database as well as the Silva138 and Greengenes2 databases \n"
   echo -ne "\t\t\tare already precompiled in the PRONAME environment and are located in the folder '${HOME}/miniconda3/envs/proname/db'. \n"
   echo -ne "\t\t\t(Change \"proname\" in this path if you named your environment differently) \n"
   echo -ne "\t\t\tThe user can provide the name of another blastn database if desired. Note that the database must be formatted \n"
   echo -ne "\t\t\tto run with the BLAST Command Line Applications (for more info, see: https://www.ncbi.nlm.nih.gov/books/NBK569841/).\n"
   echo -ne "\t--reftax\tPath to the taxonomic lineages of the sequences included in the reference database. \n"
   echo -ne "\t\t\tThe taxonomy tsv files associated with the rEGEN-B, Silva138 and Greengenes2 databases \n"
   echo -ne "\t\t\tare already precompiled in the PRONAME environment and are located in the folder \n"
   echo -ne "\t\t\t'${HOME}/miniconda3/envs/proname/db'. (Change \"proname\" in this path if you named your environment differently) \n"
   echo -ne "\t\t\tThe user can provide another reference database and associated taxonomic lineages if desired.\n"
   echo -ne "\t--evalue\tExpectation value (E) threshold to keep hits. [Default: 0.001]\n"
   echo -ne "\t--percid\tPercent identity threshold between query and subject sequences to keep hits. [Default: 80]\n"
   echo -ne "\t--qcover\tPercent query coverage threshold to keep hits. Note that this option does not correspond to the \n"
   echo -ne "\t\t\tblastn -qcov_hsp_perc option. Here, --qcover reflects the percent coverage of the whole query sequence, \n"
   echo -ne "\t\t\tso that the results provided are more consistant with those obtained with the online BLASTn tool. [Default: 80]\n"
   echo -ne "\t--threads\tNumber of threads to use for the blastn analysis. You can know the number of available threads on your \n"
   echo -ne "\t\t\tcomputer by running the command 'nproc --all' [Default: 2]\n"
   echo -ne "\t--metadata\tPath to the metadata file. It should be 'sample_metada.tsv'. This argument is only required if data was \n"
   echo -ne "\t\t\timported into QIIME2 at the previous step.\n"
   echo -ne "\t--assay\t\tName of your metabarcoding assay, that will appear in the name of taxonomy files produced.\n"
   echo -ne "\t--version\tPrint the version of the pipeline.\n"
   echo -ne "\t--help\t\tPrint this help."
   echo


## Usage example
   echo -ne "\nUsage example:"
   echo -ne "\n-------------"
   echo
   echo "proname_taxonomy \\"
   echo "  --qseqs rep_seqs.qza \\"
   echo "  --qtable rep_table.qza \\"
   echo "  --db ${HOME}/miniconda3/envs/proname/db/rEGEN-B/regenB_sequences.fasta \\     # Change \"proname\" in this path if you named your environment differently"
   echo "  --reftax ${HOME}/miniconda3/envs/proname/db/rEGEN-B/regenB_taxonomy.tsv \\    # Change \"proname\" in this path if you named your environment differently"
   echo "  --metadata sample_metadata.tsv \\"
   echo "  --assay assay1"
   echo
}

Version()
{
    echo -ne "proname_taxonomy from the PRONAME pipeline, version 0.1.0\n\n"
}

evalue="0.001"
perc_identity="80"
query_cover="80"
num_threads="2"

# Transform long options to short ones

for arg in "$@"; do
  shift
  case "$arg" in
    '--help')     set -- "$@" '-h'   ;;
    '--version')  set -- "$@" '-v'   ;;
    '--qseqs')    set -- "$@" '-a'   ;;
    '--qtable')   set -- "$@" '-b'   ;;
    '--db')       set -- "$@" '-c'   ;;
    '--reftax')   set -- "$@" '-d'   ;;
    '--evalue')   set -- "$@" '-e'   ;;
    '--percid')   set -- "$@" '-f'   ;;
    '--qcover')   set -- "$@" '-g'   ;;
    '--threads')  set -- "$@" '-i'   ;;
    '--metadata') set -- "$@" '-j'   ;;
    '--assay')    set -- "$@" '-k'   ;;
    *)            set -- "$@" "$arg" ;;
  esac
done


# Parse short options

while getopts :hva:b:c:d:e:f:g:h:i:j:k: flag
do
    case "${flag}" in
        h) Help
        exit;;
        v) Version
        exit;;
        a) query_seqs=${OPTARG};;
        b) query_table=${OPTARG};;
        c) db=${OPTARG};;
        d) ref_taxonomy=${OPTARG};;
        e) evalue=${OPTARG};;
        f) perc_identity=${OPTARG};;
        g) query_cover=${OPTARG};;
        i) num_threads=${OPTARG};;
        j) metadata=${OPTARG};;
        k) assay_name=${OPTARG};;
        \?) # Invalid option
                echo -ne "Error: Invalid option \n"
                echo -ne "Please consult the help menu with 'proname_taxonomy --help'\n"
                exit;;
    esac
done


# Mandatory arguments

if [ ! "$query_seqs" ] || [ ! "$db" ] || [ ! "$ref_taxonomy" ] || [ ! "$assay_name" ]; then
  echo -ne "\n\033[31m\033[1mError: arguments --qseqs, --db, --reftax and --assay must be provided\033[0m\n\n"
  echo -ne "Please consult the help menu with 'proname_taxonomy --help'\n"
  exit;
fi


###########################################



if [ -f "rep_seqs.qza" ]
then
   if [ ! "$query_table" ] || [ ! "$metadata" ]
   then
      echo -ne "\n\033[31m\033[1mError: arguments --qtable and --metadata must also be provided if running the taxonomic analysis on QIIME2 files (qza).\033[0m\n\n"
      echo -ne "Please consult the help menu with 'proname_taxonomy --help'\n"
   exit;
   fi

   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mCarrying out the taxonomic analysis...\033[0m\n"

   qiime tools export \
     --input-path ${query_seqs} \
     --output-path . >/dev/null 2>/dev/null

   blastn \
     -query dna-sequences.fasta \
     -db ${db} \
     -num_threads ${num_threads} \
     -max_target_seqs 15 \
     -evalue ${evalue} \
     -perc_identity ${perc_identity} \
     -outfmt "6 qacc saccver qcovs" \
     -out blastn_outfile.tsv

   # Removing matches below the query_cover threshold

   awk -v qcov="$query_cover" 'BEGIN {FS=OFS="\t"} $3>=qcov {print $1,$2}' blastn_outfile.tsv > blastn_outfile.tsv_tmp && mv blastn_outfile.tsv_tmp blastn_outfile.tsv

   # Recording the top 1 match

   awk -F'\t' '{occurrences[$1]++; if (occurrences[$1] <= 1) {print;}}' blastn_outfile.tsv > blastn_outfile.tsv_tmp && mv blastn_outfile.tsv_tmp blastn_outfile.tsv

   # Merging blastn match accession number with corresponding taxonomic lineage

   LC_ALL=C join -t $'\t' -1 2 -2 1 -a 1 \
         <(LC_ALL=C sort -t $'\t' -k 2 blastn_outfile.tsv)\
         <(LC_ALL=C sort -t $'\t' -k 1 ${ref_taxonomy}) | awk 'BEGIN {FS=OFS="\t"} {print $2,$3}' > taxonomy_blastn.tsv


   # Adding an Unassigned label for seqs without match

   cat <(grep ">" dna-sequences.fasta | cut -d '>' -f 2 | cut -d ' ' -f 1) <(cut -d $'\t' -f 1 blastn_outfile.tsv) | sort | uniq -u > Unassigned_seqids

   cat taxonomy_blastn.tsv Unassigned_seqids | awk 'BEGIN {FS=OFS="\t"} {if ($2=="") $2="Unassigned"; print}' > taxonomy_blastn.tsv_tmp
   mv taxonomy_blastn.tsv_tmp taxonomy_blastn.tsv

   
   if [ -e "taxonomy_blastn.tsv" ]
   then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mTaxonomic analysis completed! \033[0m\n"
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mImporting taxonomy file into QIIME2...\033[0m\n"
   else
      echo -ne "\n\033[31m\033[1mError: taxonomic analysis failed. \033[0m\n\n"
      echo -ne "Please consult the help menu.\n"
      exit;
   fi

   qiime tools import \
     --type 'FeatureData[Taxonomy]' \
     --input-format HeaderlessTSVTaxonomyFormat \
     --input-path taxonomy_blastn.tsv \
     --output-path taxonomy_blastn.qza >/dev/null 2>/dev/null

   if [ -e "taxonomy_blastn.qza" ]
   then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mThe taxonomy file was successfully imported into QIIME2! \033[0m\n"
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mCreating a taxa barplot...\033[0m\n"
   else
      echo -ne "\n\033[31m\033[1mError: importing taxonomy file into QIIME2 failed. \033[0m\n\n"
      echo -ne "Please consult the help menu.\n"
      exit;
   fi

   qiime taxa barplot \
     --i-table ${query_table} \
     --i-taxonomy taxonomy_blastn.qza \
     --m-metadata-file ${metadata} \
     --o-visualization taxa_barplot_${assay_name}_blastn.qzv >/dev/null 2>/dev/null

   if [ -e "taxa_barplot_${assay_name}_blastn.qzv" ]
   then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mTaxa barplot created! \033[0m\n"
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : You can now inspect the taxa barplot (\e[34mtaxa_barplot_${assay_name}_blastn.qzv\e[0m) on \033[4mhttps://view.qiime2.org/\033[0m or using the command 'qiime tools view taxa_barplot_${assay_name}_blastn.qzv'.\n"
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : You can also use the generated taxonomy file (\e[34mtaxonomy_blastn.qza\e[0m) together with the representative sequences (\e[34mrep_seqs.qza\e[0m) and their frequency in each sample (\e[34mrep_table.qza\e[0m) for further processing with QIIME2 like alpha-/beta-diversity analysis or differential abundance testing, among others.\n"
   else
      echo -ne "\n\033[31m\033[1mError: the taxa barplot creation failed. \033[0m\n\n"
      echo -ne "Please consult the help menu.\n"
      exit;
   fi

   rm Unassigned_seqids
   rm dna-sequences.fasta
   rm -r Rawseqids
   rm blastn_outfile.tsv

   unset query_seqs
   unset query_table
   unset db
   unset ref_taxonomy
   unset evalue
   unset perc_identity
   unset query_cover
   unset num_threads
   unset metadata
   unset assay_name

else
   echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;38;5;39mCarrying out the taxonomic analysis...\033[0m\n"

   blastn \
     -query ${query_seqs} \
     -db ${db} \
     -num_threads ${num_threads} \
     -max_target_seqs 15 \
     -evalue ${evalue} \
     -perc_identity ${perc_identity} \
     -outfmt "6 qacc saccver qcovs" \
     -out blastn_outfile.tsv

   # Removing matches below the query_cover threshold

   awk -v qcov="$query_cover" 'BEGIN {FS=OFS="\t"} $3>=qcov {print $1,$2}' blastn_outfile.tsv > blastn_outfile.tsv_tmp && mv blastn_outfile.tsv_tmp blastn_outfile.tsv


   # Merging blastn match accession number with corresponding taxonomic lineage

   join -t $'\t' -1 2 -2 1 -a 1 \
         <(sort -t $'\t' -k 2 blastn_outfile.tsv)\
         <(sort -t $'\t' -k 1 ${ref_taxonomy}) | awk 'BEGIN {FS=OFS="\t"} {print $2,$3}' > taxonomy_blastn.tsv


   # Adding an Unassigned label for seqs without match

   cat <(grep ">" dna-sequences.fasta | cut -d '>' -f 2 | cut -d ' ' -f 1) <(cut -d $'\t' -f 1 blastn_outfile.tsv) | sort | uniq -u > Unassigned_seqids

   cat taxonomy_blastn.tsv Unassigned_seqids | awk 'BEGIN {FS=OFS="\t"} {if ($2=="") $2="Unassigned"; print}' > taxonomy_${assay_name}_blastn.tsv

   if [ -e "taxonomy_${assay_name}_blastn.tsv" ]
   then
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : \033[1;32mTaxonomic analysis completed! \033[0m\n"
      echo -ne "[$(date +'%Y-%m-%d || %H:%M:%S')] : You can now use the generated taxonomy file (\e[34mtaxonomy_${assay_name}_blastn.tsv\e[0m) together with the representative sequences (\e[34mrep_seqs.fasta\e[0m) and their frequency in each sample (\e[34mrep_table.tsv\e[0m) for further processing outside of QIIME2."
   else
      echo -ne "\n\033[31m\033[1mError: the taxonomic analysis failed. \033[0m\n\n"
      echo -ne "Please consult the help menu.\n"
      exit;
   fi

   rm Unassigned_seqids
   rm taxonomy_blastn.tsv
   rm -r Rawseqids
   rm blastn_outfile.tsv

   unset query_seqs
   unset db
   unset ref_taxonomy
   unset evalue
   unset perc_identity
   unset query_cover
   unset num_threads
   unset assay_name

fi

